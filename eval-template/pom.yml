modelVersion: 4.0.0
groupId: org.aksw.eval.gridbench.jena
artifactId: eval-template
version: 0.0.1-SNAPSHOT
name: 'Package a directory in YAML'
packaging: pom

parent:
  groupId: org.aksw.data.config
  artifactId: aksw-data-deployment
  version: 0.0.9-SNAPSHOT

properties:
  # bench.exec.run: false # Set to false in child modules
  bench.exec.skip: true
  grid.min.x: -90
  grid.max.x: 90
  grid.min.y: -90
  grid.max.y: 90
  grid.data.rows: 512
  grid.data.cols: 512
  grid.query.rows: 16
  grid.query.cols: 16
  grid.graphs: 16
  grid.scale: true
  jvmArgs: -Xmx48G
  unionDefaultGraph: false
  dockerImageName: aksw/fuseki-vanilla:5.0.0-1
  # queriesFile: ${project.build.directory}/queries.rq
  # lsqFile: ${project.build.directory}/queries.trig
  # dataFile: ${project.build.directory}/data.nq  
  # tdb2Dir: ${project.build.directory}/tdb2
  queriesTag: ''
  allGraphs: false
  queriesFile: ${java.io.tmpdir}/gridbench/queries${queriesTag}.rq
  lsqFile: ${java.io.tmpdir}/gridbench/queries${queriesTag}.trig
  dataFile: ${java.io.tmpdir}/gridbench/data.nq  
  tdb2Dir: ${java.io.tmpdir}/gridbench/tdb2
  fusekiAssemblerFile: ${project.build.directory}/assembler.ttl
  docker.showLogs: true  
  timeout: 1800000
  
  spatialIndexFilename: spatial.index
  
  maven-antrun-plugin.version: 3.0.0
  gridbench-maven-plugin.version: 0.0.1-SNAPSHOT
  tdb2-maven-plugin.version: 0.0.1-SNAPSHOT
  lsq-maven-plugin.version: 0.0.1-SNAPSHOT
  project.build.sourceEncoding: UTF-8
  
  fusekiConfig: |
    PREFIX fuseki:    <http://jena.apache.org/fuseki#>
    PREFIX tdb2:      <http://jena.apache.org/2016/tdb#>
    PREFIX ja:        <http://jena.hpl.hp.com/2005/11/Assembler#>
    PREFIX geosparql: <http://jena.apache.org/geosparql#>
            
    <#service> a fuseki:Service ;
        fuseki:name "ds" ;
        fuseki:endpoint [ fuseki:name "update" ; fuseki:operation fuseki:update ; ] ;
        fuseki:endpoint [ fuseki:name "update" ; fuseki:operation fuseki:query ; ] ;
        fuseki:endpoint [ fuseki:name "data" ; fuseki:operation fuseki:gsp-rw ; ] ;
        fuseki:endpoint [ fuseki:name "analytics" ; fuseki:operation fuseki:query ;
                          ja:context [ ja:cxtName "arq:queryTimeout" ;  ja:cxtValue "2880000" ] ; ] ;
        fuseki:endpoint [ fuseki:name "query" ; fuseki:operation fuseki:query ; ] ;
        fuseki:endpoint [ fuseki:operation fuseki:query ; ] ;
        fuseki:dataset <#geoDS> ;
    #    fuseki:dataset <#quadsDS> .
        .
    
    #<#quadsDS> a ja:DatasetQuads ;
    #    ja:dataset <#geoDS> ;
    #    .
    
    <#geoDS> a geosparql:GeosparqlDataset ;
        ## If absent build an in-memory index each time.
        geosparql:spatialIndexFile     "/data/run/databases/tdb2/${spatialIndexFilename}";
    
        ## Default settings. See documentation for meanings.
        geosparql:inference            false ;
        geosparql:queryRewrite         true ;
        geosparql:indexEnabled         true ;
        geosparql:applyDefaultGeometry false ;
    
        # graph based index
        geosparql:spatialIndexPerGraph true ;
       
        # SRS URI
        geosparql:srsUri "http://www.opengis.net/def/crs/EPSG/0/4326" ;

        # 3 item lists: [Geometry Literal, Geometry Transform, Query Rewrite]
        geosparql:indexSizes           "-1,-1,-1" ;       # Default - unlimited.
        geosparql:indexExpires         "5000,5000,5000" ; # Default - time in milliseconds.
   
        ## Required - data over which GeoSPARQL is applied.
        geosparql:dataset <#baseDS> ;
        .

    <#baseDS> a tdb2:DatasetTDB2 ;
        tdb2:location "/data/run/databases/tdb2" ;
        tdb2:unionDefaultGraph ${unionDefaultGraph} ;
        .

build:
  plugins:
    # Write the fuseki config to a file that we can bind mount into the docker container
    - groupId: org.codehaus.gmaven
      artifactId: groovy-maven-plugin
      version: 2.1.1
      executions:
        - id: write-config
          goals: [ execute ]
          phase: validate
          configuration:
            skipScriptExecution: ${bench.exec.skip}
            # TODO Replace with a plugin that can write a file directly
            source: |
              import java.nio.file.Path;
              import java.nio.file.Files;
              Path path = Path.of("${fusekiAssemblerFile}");
              Files.createDirectories(path.getParent());
              file = path.toFile();
              file.text = """${fusekiConfig}"""
      
    # Generate the benchmark data and queries
    - groupId: org.aksw.gridbench
      artifactId: gridbench-maven-plugin
      version: ${gridbench-maven-plugin.version}
      executions:
        - id: datagen
          goals: [ data ]
          phase: generate-resources
          configuration:
            skip: ${bench.exec.skip}
            envelope:
              minX: ${grid.min.x}
              maxX: ${grid.max.x}
              minY: ${grid.min.y}
              maxY: ${grid.max.y}
            graphs: ${grid.graphs}
            scale: ${grid.scale}
            rows: ${grid.data.rows}
            cols: ${grid.data.cols}
            allGraphs: ${allGraphs}
            unionDefaultGraph: ${unionDefaultGraph}
            outputFile: ${dataFile}
        - id: querygen
          goals: [ query ]
          phase: generate-resources
          configuration:
            skip: ${bench.exec.skip}
            envelope:
              minX: ${grid.min.x}
              maxX: ${grid.max.x}
              minY: ${grid.min.y}
              maxY: ${grid.max.y}
            graphs: ${grid.graphs}
            scale: ${grid.scale}
            rows: ${grid.query.rows}
            cols: ${grid.query.cols}
            allGraphs: ${allGraphs}
            unionDefaultGraph: ${unionDefaultGraph}
            outputFile: ${queriesFile}

    # Create a TDB2 database directory from the datasat
    - groupId: org.aksw.maven.plugins
      artifactId: tdb2-maven-plugin
      version: ${tdb2-maven-plugin.version}
      executions:
        - id: load-data
          goals: [ load ]
          phase: generate-resources # by default runs in 'package' phase
          # TODO Specify the input file
          configuration:
            skip: ${bench.exec.skip}
            outputFolder: ${tdb2Dir}
            createArchive: false # Don't package the TDB2 folder as an archive
            files:
              - file: ${dataFile}              

    # Start a docker container and bind mount the config and database directory
    - groupId: io.fabric8
      artifactId: docker-maven-plugin
      configuration:
        skip: ${bench.exec.skip}
        images:
        - alias: myservice
          # name: aksw/fuseki-geoplus:5.0.0-1
          name: test-fuseki
          build:
            from: ${dockerImageName}
            healthCheck:
              # cmd: "curl -f http://localhost:3030/ds/query --data-urlencode 'query=SELECT * { ?s a <http://www.example.org/Thing> } LIMIT 1' || exit 1"
              cmd: "curl -f 'http://localhost:3030/$/ping' || exit 1"
              startPeriod: 30m
              interval: 10s
              retries: 180
              timeout: 10s
          run:
            env:
              JVM_ARGS: ${jvmArgs}
              # -XX:ReplayDataFile=/data/coypu/tools/log/fuseki_replay_pid%p.log -XX:ErrorFile=/data/coypu/tools/log/fuseki_hs_err_pid%p.log -Dderby.stream.error.file=/data/coypu/tools/log/fuseki_derby.log
            wait:
              time: '${timeout}'
              healthy: true
              exec:
                preStop: rm -f /data/run/databases/tdb2/tdb.lock && rm -f /data/run/databases/tdb2/Data-0001/tdb.lock
            # wait: { healthy: true }
            ports:
              - "3032:3030"
            volumes:
              bind: !!pairs
                # The keys are ignored; they are just needed in order for the YAML polyglot plugin to accept the config
                - b1: "${tdb2Dir}:/data/run/databases/tdb2"
                - b2: "${fusekiAssemblerFile}:/data/run/configuration/assembler.ttl"
      executions:
      - id: start-docker
        goals: [ build, start ]
        # id: run-container
        phase: generate-resources # process-resources
      - id: stop-docker
        goals: [ stop ]
        phase: compile

    - groupId: org.aksw.maven.plugins
      artifactId: lsq-maven-plugin
      version: ${lsq-maven-plugin.version}
      executions:
        - id: rdfize
          goals: [ "rdfize" ]
          phase: process-resources
          configuration:
            skip: ${bench.exec.skip}
            logFile: ${queriesFile}
            logFormat: sparql # Due to a bug in lsq's probing code this is needed
            enrichers: [ bbox ]
            outputFile: ${lsqFile}
        - id: benchmark
          goals: [ benchmark ]
          phase: process-resources
          configuration:
            skip: ${bench.exec.skip}
            logFile: ${lsqFile}
            serviceUrl: http://localhost:3032/ds/query
            baseIri: http://lsq.aksw.org/
            dataset: geobench
            outputFile: ${project.build.directory}/bench.trig


